generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  firstName         String
  lastName          String
  department        String?
  isActive          Boolean           @default(true)
  lastLoginAt       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  roleId            Int
  ActivityLog       ActivityLog[]
  approvalaction    approvalaction[]
  approvalrequest   approvalrequest[]
  assignedCustomers Customer[]
  assignedDeals     Deal[]
  interactions      Interaction[]
  notes             Note[]
  tasks             Task[]
  Role              role?             @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model Customer {
  id             String         @id @default(uuid())
  email          String         @unique
  firstName      String
  lastName       String
  company        String?
  jobTitle       String?
  phone          String?
  address        Json?
  status         CustomerStatus @default(LEAD)
  source         String?
  score          Int            @default(0)
  lifetimeValue  Decimal        @default(0.000000000000000000000000000000)
  assignedUserId String
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  customFields   Json?
  documents      Json?
  contact        contact[]
  customerTags   CustomerTag[]
  assignedUser   User           @relation(fields: [assignedUserId], references: [id])
  deals          Deal[]
  interactions   Interaction[]
  notes          Note[]
  tasks          Task[]

  @@index([assignedUserId], map: "customers_assignedUserId_fkey")
  @@map("customers")
}

model Deal {
  id                String          @id @unique @default(uuid())
  title             String
  description       String?
  value             Decimal
  currency          String          @default("USD")
  stage             DealStage       @default(PROSPECTING)
  probability       Int             @default(0)
  expectedCloseDate DateTime
  actualCloseDate   DateTime?
  customerId        String
  assignedUserId    String
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  contactId         String
  type              InteractionType @default(EMAIL)
  assignedUser      User            @relation(fields: [assignedUserId], references: [id])
  contact           contact         @relation(fields: [contactId], references: [id])
  customer          Customer        @relation(fields: [customerId], references: [id])
  interactions      Interaction[]
  notes             Note[]
  tasks             Task[]

  @@index([assignedUserId], map: "deals_assignedUserId_fkey")
  @@index([contactId], map: "deals_contactId_fkey")
  @@index([customerId], map: "deals_customerId_fkey")
  @@map("deals")
}

model Interaction {
  id          String               @id @unique @default(uuid())
  type        InteractionType
  subject     String
  content     String?
  direction   InteractionDirection
  customerId  String
  userId      String
  dealId      String?
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime             @default(now())
  completed   Boolean              @default(false)
  noteId      String
  contactId   String
  updatedAt   DateTime             @updatedAt
  contact     contact[]
  customer    Customer             @relation(fields: [customerId], references: [id])
  deal        Deal?                @relation(fields: [dealId], references: [id])
  notes       Note                 @relation(fields: [noteId], references: [id])
  user        User                 @relation(fields: [userId], references: [id])

  @@index([customerId], map: "interactions_customerId_fkey")
  @@index([dealId], map: "interactions_dealId_fkey")
  @@index([noteId], map: "interactions_noteId_fkey")
  @@index([userId], map: "interactions_userId_fkey")
  @@map("interactions")
}

model Task {
  id             String       @id @unique @default(uuid())
  title          String
  description    String?
  type           TaskType     @default(FOLLOW_UP)
  priority       TaskPriority @default(MEDIUM)
  status         TaskStatus   @default(PENDING)
  dueDate        DateTime
  completedAt    DateTime?
  customerId     String?
  dealId         String?
  assignedUserId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  contactId      String
  contact        contact[]
  note           Note[]
  assignedUser   User         @relation(fields: [assignedUserId], references: [id])
  customer       Customer?    @relation(fields: [customerId], references: [id])
  deal           Deal?        @relation(fields: [dealId], references: [id])

  @@index([assignedUserId], map: "tasks_assignedUserId_fkey")
  @@index([customerId], map: "tasks_customerId_fkey")
  @@index([dealId], map: "tasks_dealId_fkey")
  @@map("tasks")
}

model Note {
  id          String        @id @unique @default(uuid())
  title       String?
  content     String
  isPrivate   Boolean       @default(false)
  customerId  String
  dealId      String?
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  taskId      String?
  contact     contact[]
  Interaction Interaction[]
  author      User          @relation(fields: [authorId], references: [id])
  customer    Customer      @relation(fields: [customerId], references: [id])
  deal        Deal?         @relation(fields: [dealId], references: [id])
  Task        Task?         @relation(fields: [taskId], references: [id])

  @@index([authorId], map: "notes_authorId_fkey")
  @@index([customerId], map: "notes_customerId_fkey")
  @@index([dealId], map: "notes_dealId_fkey")
  @@index([taskId], map: "notes_taskId_fkey")
  @@map("notes")
}

model ActivityLog {
  id        String   @id @unique @default(uuid())
  action    String?
  entity    String?
  entityId  String?
  changes   Json?
  userId    String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "activity_logs_userId_fkey")
  @@map("activity_logs")
}

model Tag {
  id           String        @id @default(uuid())
  name         String        @unique
  color        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customerTags CustomerTag[]

  @@map("tags")
}

model CustomerTag {
  id         String   @id @unique @default(uuid())
  customerId String
  tagId      String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([customerId, tagId])
  @@index([tagId], map: "customer_tags_tagId_fkey")
  @@map("customer_tags")
}

model approvalaction {
  id                Int             @id @unique @default(autoincrement())
  approvalRequestId Int
  userId            String
  roleId            Int
  levelId           Int
  action            String
  comment           String?
  createdAt         DateTime        @default(now())
  approvalrequest   approvalrequest @relation(fields: [approvalRequestId], references: [id], map: "ApprovalAction_approvalRequestId_fkey")
  approvallevel     approvallevel   @relation(fields: [levelId], references: [id], map: "ApprovalAction_levelId_fkey")
  role              role            @relation(fields: [roleId], references: [id], map: "ApprovalAction_roleId_fkey")
  users             User            @relation(fields: [userId], references: [id], map: "ApprovalAction_userId_fkey")

  @@index([approvalRequestId], map: "ApprovalAction_approvalRequestId_fkey")
  @@index([levelId], map: "ApprovalAction_levelId_fkey")
  @@index([roleId], map: "ApprovalAction_roleId_fkey")
  @@index([userId], map: "ApprovalAction_userId_fkey")
}

model approvalconfiguration {
  id              Int           @id @unique @default(autoincrement())
  entityId        Int
  roleId          Int
  businessUnitId  Int
  approvalLevelId Int
  operation       String
  approvalOrder   Int
  approvallevel   approvallevel @relation(fields: [approvalLevelId], references: [id], map: "ApprovalConfiguration_approvalLevelId_fkey")
  entity          entity        @relation(fields: [entityId], references: [id], map: "ApprovalConfiguration_entityId_fkey")
  role            role          @relation(fields: [roleId], references: [id], map: "ApprovalConfiguration_roleId_fkey")

  @@index([approvalLevelId], map: "ApprovalConfiguration_approvalLevelId_fkey")
  @@index([entityId], map: "ApprovalConfiguration_entityId_fkey")
  @@index([roleId], map: "ApprovalConfiguration_roleId_fkey")
}

model approvallevel {
  id                    Int                     @id @unique @default(autoincrement())
  name                  String
  description           String
  approvalaction        approvalaction[]
  approvalconfiguration approvalconfiguration[]
}

model approvalrequest {
  id               Int              @id @unique @default(autoincrement())
  entityId         Int
  entityPrimaryKey Int
  operation        String
  status           String
  createdById      String
  createdAt        DateTime         @default(now())
  approvalaction   approvalaction[]
  users            User             @relation(fields: [createdById], references: [id], map: "ApprovalRequest_createdById_fkey")
  entity           entity           @relation(fields: [entityId], references: [id], map: "ApprovalRequest_entityId_fkey")

  @@index([createdById], map: "ApprovalRequest_createdById_fkey")
  @@index([entityId], map: "ApprovalRequest_entityId_fkey")
}

model contact {
  id            String       @id @unique @default(uuid())
  customerId    String
  type          String
  value         String
  taskId        String
  interactionId String?
  noteId        String
  customers     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "Contact_customerId_fkey")
  interactions  Interaction? @relation(fields: [interactionId], references: [id], map: "Contact_interactionId_fkey")
  notes         Note         @relation(fields: [noteId], references: [id], map: "Contact_noteId_fkey")
  tasks         Task         @relation(fields: [taskId], references: [id], map: "Contact_taskId_fkey")
  deal          Deal[]

  @@index([customerId], map: "Contact_customerId_fkey")
  @@index([interactionId], map: "Contact_interactionId_fkey")
  @@index([noteId], map: "Contact_noteId_fkey")
  @@index([taskId], map: "Contact_taskId_fkey")
}

model entity {
  id                    Int                     @id @unique @default(autoincrement())
  name                  String
  description           String?
  approvalconfiguration approvalconfiguration[]
  approvalrequest       approvalrequest[]
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "Permission_name_key")
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  rolepermission rolepermission[]
}

model role {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique(map: "Role_name_key")
  description           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  approvalaction        approvalaction[]
  approvalconfiguration approvalconfiguration[]
  rolepermission        rolepermission[]
  users                 User[]
}

model rolepermission {
  id           Int        @id @unique @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "RolePermission_permissionId_fkey")
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RolePermission_roleId_fkey")

  @@unique([roleId, permissionId], map: "RolePermission_roleId_permissionId_key")
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Ticket {
  title         String   @id @unique
  description   String
  status        String   @default("Todo")
  priority      String
  deadline      DateTime
  helpfulNotes  String
  relatedSkills String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdByEmail  String
  assignedToEmail String

  createdBy  use @relation("CreatedTickets", fields: [createdByEmail], references: [email])
  assignedTo use @relation("AssignedTickets", fields: [assignedToEmail], references: [email])
}

model use {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  skills    String
  role      Role     @default(admin)

  createdTickets  Ticket[] @relation("CreatedTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
}

enum Role {
  admin
  user
  manager
}

enum rore {
  admin
  user
  moderator
}

enum CustomerStatus {
  LEAD
  PROSPECT
  CUSTOMER
  INACTIVE
}

enum DealStage {
  PROSPECTING
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum InteractionType {
  EMAIL
  CALL
  MEETING
  SMS
  SOCIAL
  WEBSITE
}

enum InteractionDirection {
  INBOUND
  OUTBOUND
}

enum TaskType {
  FOLLOW_UP
  DEMO
  PROPOSAL
  CONTRACT
  SUPPORT
  MEETING
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
